import 'dart:io';
import 'dart:async';

const migrationsPath = 'lib/migrations/';
String migrationFileName(int version) => 'migration_v$version.dart';
Future<void> main(List<String> args) async {
  final dir = Directory(migrationsPath);
  if (!dir.existsSync()) {
    stdout.writeln('creating lib/migrations directory...');
    try {
      dir.createSync();
      stdout.writeln('lib/migrations directory created successfuly');
    } catch (_) {
      stderr.writeln('Unable to create lib/migrations directory');
      return;
    }
  }
  final lastCreatedVersion = await _getLastCreatedMigrationVersion(dir);
  _generateMigration(lastCreatedVersion);
}

Future<int> _getLastCreatedMigrationVersion(Directory dir) async {
  int lastVersion = 0;
  final migrations = await _getExistingMigrations(dir);
  for (var i = 0; i < migrations.length; i++) {
    if (migrations[i].path.contains('migration_v')) lastVersion++;
  }
  return lastVersion;
}

Future<List<File>> _getExistingMigrations(Directory dir) async {
  final List<FileSystemEntity> entities = await dir.list().toList();
  final files = entities.whereType<File>().toList();
  return files;
}

void _generateMigration(int lastVersion) {
  final newVersion = lastVersion + 1;
  final migrationFile = File(migrationsPath + migrationFileName(newVersion));
  
  final migrationTemplate = """
class MigrationV$newVersion {
  static void run(){
    // TODO:: implement run method
    throw UnimplementedError();
  }
}""";
  migrationFile.writeAsString(migrationTemplate);
  _updateRunnerSwitch(newVersion);
}

void _updateRunnerSwitch(int version) {
  final runnerDir = Directory(migrationsPath + 'runner/');
  if (!runnerDir.existsSync()) {
    stdout.writeln('creating lib/migrations/runner/ directory...');
    try {
      runnerDir.createSync();
      stdout.writeln('lib/migrations/runner/ directory created successfuly');
    } catch (_) {
      stderr.writeln('Unable to create lib/migrations/runner/ directory');
      return;
    }
  }
  final runnerSwitchFile = File(migrationsPath + 'runner/switch.dart');
  if (runnerSwitchFile.existsSync()) {
    runnerSwitchFile.delete();
  }
  String headers = '';
  String cases = '';

  for (var i = 1; i < version + 1; i++) {
    headers = headers +
        "import 'package:cake_wallet/migrations/migration_v$i.dart';\n";
    cases = cases +
        '\n' +
        """
      case $i:
        await MigrationV$i.run();
        break;""";
  }
  final switchStatement = """Future<void> switchMigrations(int version) async {
    switch (version) {
      $cases
      default:
    }
  }""";
  final info = '/// Contents of this file is autogenerated, avoid editing manually \n';
  final comment = '/// Switch for versions of migrations to run \n';
  final content = info + headers + '\n' + comment + switchStatement;
  runnerSwitchFile.writeAsString(content);
}
